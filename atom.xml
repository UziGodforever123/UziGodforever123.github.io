<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lovezdf</title>
  
  <subtitle>LoveZDF的博客</subtitle>
  <link href="http://www.luckyzmj.cn/atom.xml" rel="self"/>
  
  <link href="http://www.luckyzmj.cn/"/>
  <updated>2021-10-07T09:35:06.901Z</updated>
  <id>http://www.luckyzmj.cn/</id>
  
  <author>
    <name>LoveZDF</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式</title>
    <link href="http://www.luckyzmj.cn/posts/364ea8cc.html"/>
    <id>http://www.luckyzmj.cn/posts/364ea8cc.html</id>
    <published>2021-10-07T06:07:10.611Z</published>
    <updated>2021-10-07T09:35:06.901Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p><strong>定义</strong>：将一个请求封装为一个对象，从而允许你使用不同的请求、队列或日志将客户端参数化，同时支持请求操作的撤销与恢复。<br>命令就是一个实例化的方法调用。</p><p>简单的说，<strong>命令模式</strong>就是将所需要执行的行为封装在一个类中，方便扩展。</p><p><strong>命令模式代码实现</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>actor<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">move</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Command</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>actor<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>a<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        <span class="token operator">++</span>a<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">jump</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Command</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>actor<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>a<span class="token punctuation">.</span>h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是命令模式简单的代码实现。将需要执行的指令封装在类中，通过指针指向不同的命令类实例来执行不同的指令。<br>也许这样看，命令模式的优点并不明显，那么让我们对命令模式与非命令模式进行对比来看。</p><p><strong>非命令模式代码实现</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span>actor<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">++</span>a<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token operator">++</span>a<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span>actor<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">++</span>a<span class="token punctuation">.</span>h<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设现在程序结束用户的输入，并调用相应的处理函数。<br><strong>对于非命令模式的调用</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">InputHandler</span><span class="token operator">::</span><span class="token function">handleInput</span><span class="token punctuation">(</span>actor<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPressed</span><span class="token punctuation">(</span>button_w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPressed</span><span class="token punctuation">(</span>button_k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">jump</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对于命令模式的调用</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">InputHandler</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span> Command<span class="token operator">*</span> _button_w<span class="token punctuation">;</span> Command<span class="token operator">*</span> _button_k<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token keyword">void</span> <span class="token function">handleInput</span><span class="token punctuation">(</span>actor<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPressed</span><span class="token punctuation">(</span>button_w<span class="token punctuation">)</span><span class="token punctuation">)</span> _button_w<span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPressed</span><span class="token punctuation">(</span>button_k<span class="token punctuation">)</span><span class="token punctuation">)</span> _button_k<span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相对于非命令模式，命令模式带来的好处是显而易见的。我们可以通过更改<strong>InputHandler</strong>中指针指向的实例，来轻松改变处理函数的行为。<br>而非命令模式显然是无法做到的。</p><p>在一款游戏中，非命令模式的设计使我们在按下w时，角色就会移动，按下k时角色就会跳跃。但是我们无法更改这些按键设置。<br>而命令模式的设计能够让我们对这些按键对应的行为作出修改。我们可以使<strong>_button_w</strong> 指向jump实例，而使<strong>_button_k</strong>指向move实例。<br>这样当我们按下w时，角色就会跳跃，按下k时角色就会移动。</p><p><strong>撤销与重做</strong><br>命令模式的很重要的一个应用就是实现撤销操作。<br>我们可以在命令类中保存当前游戏角色的状态。并在其中添加一个撤销函数，在我们希望撤销时，调用该命令实例的撤销函数即可。</p><p>class move{ </p><p>private:<br>actor* a;<br>int pre_x;<br>int pre_y;<br>public:<br>  void execute();<br>  void undo();<br>};</p><p>我们可以用一个栈来存储执行过的指令，当我们希望撤销时，将栈顶命令对象出栈，并调用该对象的undo函数即可实现撤销。</p><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>使用共享以高效地支持大量的细粒度对象。</p><p>程序中存在大量的细粒度对象，如果我们为每个对象创建一个实例，那么会导致极大的内存消耗。<strong>享元模式</strong>就是为了解决这种问题的。</p><p><strong>享元模式</strong>将大量的细粒度对象拆分为两部分。一部分这些对象的通用状态，即这些对象的这些字段都相同；另一部分是这些对象之间的差异。</p><p><strong>例</strong><br>如果我们希望实现一片森林。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">TreeModel</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>   Mesh mesh<span class="token punctuation">;</span>   Texture bark<span class="token punctuation">;</span>   Texture leaves<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Tree</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>  TreeModel<span class="token operator">*</span> model<span class="token punctuation">;</span>  Vector position<span class="token punctuation">;</span>  <span class="token keyword">double</span> height<span class="token punctuation">;</span>  <span class="token keyword">double</span> thickness<span class="token punctuation">;</span>  Color barkTint<span class="token punctuation">;</span>  Color leafTint<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TreeModel中存储的就是森林中树木的通用状态，它们的纹理数据。<br>Tree中的model指针指向该TreeModel实例，实现所有树木对象对纹理数据的共享。而Tree中的其他字段则描述了树木之间的差异。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>在对象间定义一种一对多的依赖关系，以便当某对象的状态改变时，与它存在依赖关系的所有对象都能收到通知并自动进行更新。</p><p><strong>例子</strong><br>成就系统</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="设计模式" scheme="http://www.luckyzmj.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://www.luckyzmj.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="http://www.luckyzmj.cn/posts/16518a5d.html"/>
    <id>http://www.luckyzmj.cn/posts/16518a5d.html</id>
    <published>2021-10-07T02:19:37.661Z</published>
    <updated>2021-10-07T02:20:03.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="http://www.luckyzmj.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://www.luckyzmj.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://www.luckyzmj.cn/posts/c517589e.html"/>
    <id>http://www.luckyzmj.cn/posts/c517589e.html</id>
    <published>2021-10-07T01:26:47.879Z</published>
    <updated>2021-10-07T01:27:30.888Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="http://www.luckyzmj.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://www.luckyzmj.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解：最长公共子序列</title>
    <link href="http://www.luckyzmj.cn/posts/db762c63.html"/>
    <id>http://www.luckyzmj.cn/posts/db762c63.html</id>
    <published>2021-10-05T09:09:38.756Z</published>
    <updated>2021-10-05T09:11:20.280Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>376. 摆动序列</title>
    <link href="http://www.luckyzmj.cn/posts/fd52a4c5.html"/>
    <id>http://www.luckyzmj.cn/posts/fd52a4c5.html</id>
    <published>2021-10-04T12:08:19.929Z</published>
    <updated>2021-10-04T12:09:12.534Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="摆动序列"><a href="#摆动序列" class="headerlink" title="摆动序列"></a>摆动序列</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>238. 除自身以外数组的乘积</title>
    <link href="http://www.luckyzmj.cn/posts/21d84a23.html"/>
    <id>http://www.luckyzmj.cn/posts/21d84a23.html</id>
    <published>2021-10-04T08:12:18.452Z</published>
    <updated>2021-10-04T08:13:17.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="除自身以外的数组乘积"><a href="#除自身以外的数组乘积" class="headerlink" title="除自身以外的数组乘积"></a>除自身以外的数组乘积</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解：148.排序链表</title>
    <link href="http://www.luckyzmj.cn/posts/10024fb.html"/>
    <id>http://www.luckyzmj.cn/posts/10024fb.html</id>
    <published>2021-10-04T07:41:31.852Z</published>
    <updated>2021-10-04T07:42:19.336Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解：169.多数元素</title>
    <link href="http://www.luckyzmj.cn/posts/db1203f1.html"/>
    <id>http://www.luckyzmj.cn/posts/db1203f1.html</id>
    <published>2021-10-04T04:06:37.701Z</published>
    <updated>2021-10-04T04:07:23.351Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a>多数元素</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>洗牌算法</title>
    <link href="http://www.luckyzmj.cn/posts/4beee9d1.html"/>
    <id>http://www.luckyzmj.cn/posts/4beee9d1.html</id>
    <published>2021-10-04T04:05:42.729Z</published>
    <updated>2021-10-04T04:06:14.428Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解：146.LRU缓存机制的实现</title>
    <link href="http://www.luckyzmj.cn/posts/d07fe0f9.html"/>
    <id>http://www.luckyzmj.cn/posts/d07fe0f9.html</id>
    <published>2021-10-04T03:53:06.329Z</published>
    <updated>2021-10-04T07:42:28.339Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LRU缓存机制"><a href="#LRU缓存机制" class="headerlink" title="LRU缓存机制"></a>LRU缓存机制</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>解析二叉搜索树</title>
    <link href="http://www.luckyzmj.cn/posts/6151f2.html"/>
    <id>http://www.luckyzmj.cn/posts/6151f2.html</id>
    <published>2021-10-03T15:51:29.302Z</published>
    <updated>2021-10-06T13:22:21.925Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二叉搜索树及其变种"><a href="#二叉搜索树及其变种" class="headerlink" title="二叉搜索树及其变种"></a>二叉搜索树及其变种</h1><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p><strong>定义</strong><br>二叉搜索树以二叉树为基础，对于它的每个节点其左子树中的所有节点的值都要小于该节点，其右子树中所有节点的值都要大于该节点。</p><p><strong>复杂度</strong><br>当我们需要查找一个指定值的节点时，时间复杂度为 O((logn))，最坏的时间复杂度为O((n))。<br>当我们需要向树中插入一个节点时，时间复杂度为O((logn))，最坏时间复杂度为O((n))。<br>当我们需要删除树中的一个元素时，时间复杂度为O((logn))，最坏时间复杂度为O((n))。</p><p><strong>代码实现</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>TreeNode<span class="token operator">*</span> left<span class="token punctuation">;</span>TreeNode<span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">val</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> l<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">val</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//在BST中查找指定元素</span>TreeNode<span class="token operator">*</span> <span class="token function">BST_find</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">BST_find</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">BST_find</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//向BST中插入指定元素</span><span class="token keyword">void</span> <span class="token function">BST_insert</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>TreeNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">BST_insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>TreeNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">BST_insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>TreeNode<span class="token operator">*</span> <span class="token function">findmax</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">findmax</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//删除BST中的指定元素</span>TreeNode<span class="token operator">*</span> <span class="token function">BST_delete</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">delete</span> root<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>TreeNode<span class="token operator">*</span> result <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span><span class="token keyword">delete</span> root<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>TreeNode<span class="token operator">*</span> result <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span><span class="token keyword">delete</span> root<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token function">findmax</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">BST_delete</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> m<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token operator">-&gt;</span>right <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val <span class="token operator">&gt;</span> key <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">BST_delete</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> key <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">BST_delete</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="平衡二叉搜索树-AVL"><a href="#平衡二叉搜索树-AVL" class="headerlink" title="平衡二叉搜索树 AVL"></a>平衡二叉搜索树 AVL</h3><p>由于二叉搜索树会出现左右子树分布不均匀的情况，导致查找的时间复杂度增大，因此我们需要平衡二叉搜索树，来解决这种问题。</p><p>所谓平衡二叉搜索树，就是平衡的二叉搜索树。<br>而平衡二叉树需要满足的性质是树中任意节点的左右子树深度之差不大于1。</p><p><strong>时间复杂度</strong></p><p>由于AVL是平衡的，因此查找的时间复杂度为O((nlogn))。</p><p><strong>代码实现</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">AVLNode</span> <span class="token punctuation">{</span><span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token keyword">int</span> height<span class="token punctuation">;</span>AVLNode<span class="token operator">*</span> left<span class="token punctuation">;</span>AVLNode<span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token function">AVLNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">val</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//得到该节点的深度</span><span class="token keyword">int</span> <span class="token function">get_height</span><span class="token punctuation">(</span>AVLNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> root<span class="token operator">-&gt;</span>height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//得到该节点的平衡因子</span><span class="token keyword">int</span> <span class="token function">get_bf</span><span class="token punctuation">(</span>AVLNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//LL型</span>AVLNode<span class="token operator">*</span> <span class="token function">LL_rotate</span><span class="token punctuation">(</span>AVLNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>AVLNode<span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>temp<span class="token operator">-&gt;</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>temp<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">get_height</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_height</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//RR型</span>AVLNode<span class="token operator">*</span> <span class="token function">RR_rotate</span><span class="token punctuation">(</span>AVLNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>AVLNode<span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>temp<span class="token operator">-&gt;</span>left <span class="token operator">=</span> root<span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>temp<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">get_height</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_height</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//LR型</span>AVLNode<span class="token operator">*</span> <span class="token function">LR_rotate</span><span class="token punctuation">(</span>AVLNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>AVLNode<span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">RR_rotate</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">LL_rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//RL型</span>AVLNode<span class="token operator">*</span> <span class="token function">RL_rotate</span><span class="token punctuation">(</span>AVLNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>AVLNode<span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">LL_rotate</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">RR_rotate</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//向AVL树中插入元素</span>AVLNode<span class="token operator">*</span> <span class="token function">AVL_insert</span><span class="token punctuation">(</span>AVLNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">AVLNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">AVL_insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>AVLNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AVLNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">AVL_insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>AVLNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AVLNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>root<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> bf <span class="token operator">=</span> <span class="token function">get_bf</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">LL_rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">LR_rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">RR_rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">RL_rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span>AVLNode<span class="token operator">*</span> <span class="token function">findmin</span><span class="token punctuation">(</span>AVLNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">findmin</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//从AVL树中删除元素</span>AVLNode<span class="token operator">*</span> <span class="token function">AVL_delete</span><span class="token punctuation">(</span>AVLNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">delete</span> root<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>AVLNode<span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span><span class="token keyword">delete</span> root<span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>AVLNode<span class="token operator">*</span> temp<span class="token operator">=</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span><span class="token keyword">delete</span> root<span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>AVLNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token function">findmin</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">AVL_delete</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> temp<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token operator">-&gt;</span>val <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">AVL_delete</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">AVL_delete</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>root<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get_height</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> bf <span class="token operator">=</span> <span class="token function">get_bf</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_bf</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">LL_rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_bf</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">LR_rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_bf</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">RR_rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_bf</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">RL_rotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><h3 id="2-3-树"><a href="#2-3-树" class="headerlink" title="2-3 树"></a>2-3 树</h3><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><h3 id="Trie-字典树"><a href="#Trie-字典树" class="headerlink" title="Trie 字典树"></a>Trie 字典树</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="http://www.luckyzmj.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://www.luckyzmj.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解：9.回文串匹配</title>
    <link href="http://www.luckyzmj.cn/posts/9b57d745.html"/>
    <id>http://www.luckyzmj.cn/posts/9b57d745.html</id>
    <published>2021-10-03T13:20:49.392Z</published>
    <updated>2021-10-03T15:55:02.962Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="回文串"><a href="#回文串" class="headerlink" title="回文串"></a>回文串</h1><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="转换为字符串求解"><a href="#转换为字符串求解" class="headerlink" title="转换为字符串求解"></a>转换为字符串求解</h4><p>求解此题最直接的想法肯定是将该整数转换为字符串，之后在进行判断。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            string s<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token operator">++</span>l<span class="token punctuation">;</span>                    <span class="token operator">--</span>r<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法需要O(n)的空间复杂度。</p><h4 id="反转一半数字"><a href="#反转一半数字" class="headerlink" title="反转一半数字"></a>反转一半数字</h4><p>如果我们希望不利用额外空间来对整数进行字符串判断，那么我们可以取出该整数的后半部分，将其反转在进行比较。<br>其中，有几个细节需要注意。<br>除了要考虑负数之外，还需要考虑该整数的个位是0的情况。如果个位是0，那么该数就一定不是回文数。<br>此外，如果该整数有奇数位，那么在最后进行结果判断时就要比较l与r/10的大小，以此来去除该回文数的中间位。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> l<span class="token operator">=</span>x<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">int</span> temp<span class="token operator">=</span>l<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>              l<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>              r<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>              r<span class="token operator">+=</span>temp<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> l<span class="token operator">==</span>r<span class="token operator">||</span>l<span class="token operator">==</span>r<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>位运算总结</title>
    <link href="http://www.luckyzmj.cn/posts/d8a39912.html"/>
    <id>http://www.luckyzmj.cn/posts/d8a39912.html</id>
    <published>2021-09-28T09:04:32.079Z</published>
    <updated>2021-09-28T09:06:21.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解：二叉树后序遍历</title>
    <link href="http://www.luckyzmj.cn/posts/54277129.html"/>
    <id>http://www.luckyzmj.cn/posts/54277129.html</id>
    <published>2021-09-28T03:29:40.027Z</published>
    <updated>2021-09-28T09:06:21.282Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二叉树后序遍历题解"><a href="#二叉树后序遍历题解" class="headerlink" title="二叉树后序遍历题解"></a>二叉树后序遍历题解</h1><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 true，否则返回 false。假设输入的数组的任意两个数字都互不相同。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="递归-分治"><a href="#递归-分治" class="headerlink" title="递归 分治"></a>递归 分治</h4><p>由于要判断该数组是不是一个二叉搜索树的后序遍历的结果，那么我们可以将该数组划分为三部分。<br>| 左子树 | 右子树 | 根节点 |<br>| — | — | — |</p><p>由于二叉搜索树的特性导致，<strong>左子树中所有节点的值都要比根节点的值小，右子树中所有节点的值都要比根节点的值大</strong>。</p><p>我们可以通过找到数组中第一个值大于根节点的值的元素的位置，来对左右子树进行划分。判断该左右子树中的值是否符合上述结论。<br>之后再判断该根节点的左右子树是不是一个二叉搜索树的后序遍历。</p><p>设数组为[0,n)，该元素位置为<strong>m</strong>，那么 左子树的区间是[0,m),右子树的区间是[m,n)。<br>我们已经知道左子树区间中的所有元素的值全部都比根节点的值小，那么现在就需要判断右子树区间中的所有元素是不是比跟节点的值大，即可。<br>然后再进行递归判断即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 面经</title>
    <link href="http://www.luckyzmj.cn/posts/8140e56d.html"/>
    <id>http://www.luckyzmj.cn/posts/8140e56d.html</id>
    <published>2021-09-27T02:08:43.950Z</published>
    <updated>2021-10-01T10:04:37.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p><strong>1.介绍http协议</strong><br>HTTP 超文本传输协议。<br>HTTP定义了Web客户端向Web服务器端</p><h3 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h3><p><strong>1.TCP与UDP的区别</strong></p><ul><li>TCP是面向连接的全双工协议。TCP提供可靠传输保证，提供拥塞控制与流量控制。</li><li>UDP是无连接的协议。UDP不提供可靠传输保证，也不提供拥塞控制。</li></ul><p>区别：</p><ul><li>TCP是面向连接的，在通信之前要首先建立连接。而UDP是无连接的。</li><li>TCP是全双工的，只提供点对点的服务。而UDP支持一对一、一对多、多对一、多对多的交互通信。</li><li>TCP提供可靠数据传输保证（超时间间隔加倍、快速重传、选择确认），而UDP只保证尽最大努力交付。</li><li>TCP提供流量控制与拥塞控制服务保证数据传输的安全性。而UDP不提供任何服务。</li><li>TCP是动态报文长度，面向字节流。其长度由接收方窗口大小和当前网络的拥塞状况决定。而UDP面向报文，不对报文进行合并或拆分。</li><li>TCP的首部为20字节。UDP的首部为8字节，UDP首部开销更小。</li></ul><p><strong>2.三次握手与四次挥手</strong></p><p>三次握手：</p><ul><li>首先，客户端向服务器发送SYN报文，序列号为x，进入 SYNC_SENT状态。</li><li>然后，服务器接收到该SYN报文，将SYN与ACK置为1，序列号为y，确认号为（x+1），向客户端发送SYNACK报文，表明已收到SYN报文。</li><li>最后，在客户端收到SYNACK报文后，向服务器发送最后一个报文段表示对于SYNACK的确认。将SYN置为0，确认号（y+1）。</li></ul><p>原因：</p><ul><li>三次握手可以防止已经失效的连接请求报文突然又传输到服务器端导致服务器的资源浪费。</li></ul><p>四次挥手：</p><ul><li>第一次挥手：客户端准备关闭连接，向服务器发送FIN=1的TCP报文。此时客户端停止向服务器发送数据，但仍然可以接收来自服务器的数据。</li><li>第二次挥手：服务器在接收到该报文后，向客户端发送确认报文。</li><li>第三次挥手：在服务器发送完所有需要发送的数据后，向客户端发送FIN报文。</li><li>第四次挥手：客户端向服务器发送一个ACK报文，此时客户端进入TIME_WAIT状态，等待2MSL后，关闭连接。</li></ul><p>客户端和服务器端分别以两次挥手关闭自己到另外一端的连接。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面经" scheme="http://www.luckyzmj.cn/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="http://www.luckyzmj.cn/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="计算机网络" scheme="http://www.luckyzmj.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>图形学 面经</title>
    <link href="http://www.luckyzmj.cn/posts/7a0cf5ae.html"/>
    <id>http://www.luckyzmj.cn/posts/7a0cf5ae.html</id>
    <published>2021-09-27T01:46:01.720Z</published>
    <updated>2021-10-01T10:04:37.799Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="图形学面经"><a href="#图形学面经" class="headerlink" title="图形学面经"></a>图形学面经</h1><h3 id="3D数学"><a href="#3D数学" class="headerlink" title="3D数学"></a>3D数学</h3><p><strong>1.判断点是否在三角形内部</strong></p><ul><li>重心坐标：如果该点在三角形内部，那么重心坐标应该都为非负值。</li><li>面积法：三个部分之和与原三角形面积相等。</li><li>求该点与顶点所连向量的叉乘结果。如果三个都同号，则说明该点在三角形内部。</li></ul><h3 id="图形学"><a href="#图形学" class="headerlink" title="图形学"></a>图形学</h3><p><strong>1.渲染管线</strong><br>渲染管线指的是将一堆具有几何信息的数据点最终转换到二维屏幕空间的像素。</p><ul><li>顶点处理：对顶点数据进行 MVP变换。（模型变换、视角变换、投影变换）</li><li>三角形处理：将顶点按照原本的几何信息组合成三角形面。</li><li>光栅化：确认三角形中的每个像素点。</li><li>片元处理：对像素点进行着色。</li><li>将像素点信息转换为图像</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面经" scheme="http://www.luckyzmj.cn/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="图形学" scheme="http://www.luckyzmj.cn/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="面经" scheme="http://www.luckyzmj.cn/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统 面经</title>
    <link href="http://www.luckyzmj.cn/posts/d7a4c9e9.html"/>
    <id>http://www.luckyzmj.cn/posts/d7a4c9e9.html</id>
    <published>2021-09-25T04:59:45.409Z</published>
    <updated>2021-10-01T09:46:54.521Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="操作系统面经"><a href="#操作系统面经" class="headerlink" title="操作系统面经"></a>操作系统面经</h1><h3 id="操作系统综述"><a href="#操作系统综述" class="headerlink" title="操作系统综述"></a>操作系统综述</h3><p><strong>用户态与内核态</strong></p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p><strong>1.程序、进程的区别</strong>：<br>程序是一个<strong>静态的概念</strong>，简单的说，程序就是一个指令序列。<br>进程则是一个<strong>动态的概念</strong>，一个进程对应一个执行中的程序。操作系统通过进程控制块PCB来获取进程当前的信息，对进程进行控制和管理。<br>有了进程的存在，每个程序在执行时，就好像独占了CPU，不需要考虑何时需要把CPU让给其他程序。<br><strong>2.进程与线程的区别</strong>：</p><ul><li>概念：进程是操作系统进行资源管理的基本单位。线程则是CPU调度的最小单位。</li><li>一个进程可以有多个线程，而一个线程只能属于一个进程。</li><li>一个进程拥有它独立的内存，而进程的多个线程则共享该进程的内存。线程共享进程的代码段、数据段以及堆内存，但是每个线程拥有自己独立的<strong>栈</strong>。</li><li>一个进程崩溃不会对其他进程产生影响，而一个线程崩溃可能会导致其他线程也会死掉。</li><li>在创建或回收进程时，操作系统需要为进程分配内存空间以及I/O设备等资源。而创建和回收线程则不需要这些开销。</li><li><strong>线程间切换开销更小</strong>。线程切换则只需要保存和读取一些寄存器的内容（切换内核栈、切换硬件上下文（即一些寄存器信息））。而进程的切换还需要切换页表等信息（切换到新的进程的地址空间（还需要刷新TLB））。</li><li>通信：由于同一进程的线程之间共享该进程的内存，因此线程之间的通信实现起来比较容易。而进程之间的通信则实现起来更为复杂。</li></ul><p><strong>3.进程的5个状态</strong>：</p><ul><li>创建态：进程刚被创建出来，还没有初始化，无法被调度执行。</li><li>就绪态：等待被调度执行</li><li>运行态：正在执行</li><li>阻塞态：等待外部事件</li><li>终止态：执行完毕，不会再被调度。</li></ul><p><strong>4.进程间通信方式</strong>：</p><ul><li>共享内存：内核为需要通信的进程建立共享区域。</li><li>信号：单向的事件通知能力。通知其他进程，接收到信号的进程执行相应的处理函数。</li><li>信号量：主要用于进程间同步。</li><li>消息队列：<br>消息队列以链表的形式存储消息，存放于内核中。对于消息队列具有写权限的进程可以向消息队列中添加消息。对消息队列有读权限的进程可以向消息队列中读消息。 <strong>消息</strong>的内容包含<strong>类型</strong>和<strong>数据</strong>。</li><li>管道：命名管道、匿名管道 使用内存作为缓冲区，两个进程，单向传递数据，一端读，一端写。</li><li>套接字：</li></ul><p><strong>5.进程调度策略</strong></p><ul><li><strong>FIFO 先进先出策略</strong> (FCFS先来先服务)</li></ul><p> <strong>优点</strong>：简单、直观<br> <strong>缺点</strong>：<br>    - 在长短任务混合的情况下，对短任务不友好。<br>    - 对I/O密集型任务不友好。对于I/O密集型任务，其中有大量时间在等待I/O，而此时CPU便在空闲，却不能被利用。</p><ul><li><strong>SJF 最短任务优先</strong>：消耗时间短的任务先执行。</li></ul><p> <strong>缺点</strong>：<br>    - 必须预先知道任务的运行时间。<br>    - 其表现严重依赖于任务到达的时间点。：如果在调度发生时，短任务尚未到达，那么就只能选择长任务。这样短任务仍然需要等待长任务执行完毕。</p><ul><li><strong>STCF 最短完成时间任务优先</strong>。SJF的抢占式版本。在短任务到达时，如果正在执行的任务的剩余时间大于短任务的执行时间，那么该短任务就会抢占CPU。</li></ul><p><strong>缺点</strong>：</p><ul><li>仍然需要知晓任务的运行时间。</li><li>会导致长任务饥饿。如果不断有短任务到来，那么长任务就永远不会被执行。</li><li><strong>RR 时间片轮转</strong> 为任务设置时间片，限定任务的执行时间，当时间片执行完后，就切换到下一个任务。</li><li><strong>MLQ 多级队列</strong>：为任务划分优先级，先处理高优先级的任务，在处理低优先级的任务。</li></ul><p>  <strong>缺点</strong>：<br>    - 低优先级任务饥饿。<br>    - 优先级反转</p><ul><li><strong>MLFQ 多级反馈队列</strong>:</li></ul><p> <strong>策略</strong>：</p><ul><li>短任务具有更高的优先级。</li><li>低优先级的任务的时间片更长。  </li><li>定期将所有任务的优先级提升至最高。 ：避免饥饿</li></ul><p><strong>6.进程间同步</strong><br>通过一个计数器实现进程间的同步。由于在同一时间只能有一个进程对该计数器进行操作，因此我们需要在临界区中执行对于该计数器的操作。<br>保证互斥访问共享资源的区域被称为<strong>临界区</strong>。<br>临界区的三个条件：</p><ul><li>互斥访问：同一时刻只能有一个线程进入临界区。</li><li>有限等待：一个线程在临界区外等待的时间是有限的。</li><li>空闲让进：如果临界区是空闲的，那么如果在临界区外有线程等待，必须在其中选择一个线程进入临界区。</li></ul><p>   <strong>互斥锁</strong>：保证在同一时刻只有一个进程能访问被锁定的资源。<br>   <strong>条件变量</strong>：当进程等待某一个条件时，进入休眠状态，切换到其他进程执行。当条件被满足后，所有等待该条件的进程都会被唤醒。<br>信号量=互斥锁+条件变量+计数器<br>同步的时候用一个互斥量，在访问共享对象前，对互斥量加锁，在结束访问后，释放互斥量上的锁。</p><p><strong>7.用过的锁</strong></p><ul><li>互斥锁：<ul><li>自旋锁：申请获取锁，如果锁已经被获取，那么就自旋等待。</li></ul></li><li>读写锁<br>互斥锁能够保证对于共享资源，在同一时刻只能对其执行一个操作。但是由于一个对于共享资源的读操作并不互斥，我们希望能够同时执行多个读操作，而不能让写操作与读操作同时执行。<br>如果有一些读者处于临界区中，此时一个读者和一个写者同时申请进入临界区。<ul><li>偏向读者的读写锁：允许读者直接进入。</li><li>偏向写者的读写锁：等之前的读者离开临界区后，先允许写者进入临界区，再允许读者进入。</li></ul></li></ul><p><strong>8.死锁</strong><br>死锁产生的条件：</p><ul><li>互斥</li><li>请求与保持</li><li>循环等待</li><li>不可抢占<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3></li></ul><p><strong>分段</strong>：<br>在分段机制下，操作系统以“段”的形式管理。虚拟地址由段基地址与段内偏移组成。<br>缺点：容易产生外部碎片。即在段与段之间留下碎片空间。<br><strong>分页</strong>：<br>在分页机制下，操作系统将内存分为连续、等长的页。虚拟地址由虚拟页号和页内偏移量组成。<br><strong>虚拟内存</strong>：<br>虚拟内存使得每个进程仿佛独占了所有物理内存。每个进程只把自己需要的内存映射到物理内存。CPU中的MMU将虚拟地址翻译为物理地址。<br>虚拟内存使得应用程序能够拥有一个独立而连续的虚拟地址空间，<br><strong>优点</strong>：</p><ul><li>1.扩大地址空间</li><li>2.内存保护：每个进程都只能访问自己的内存，无法访问其他进程的内存，可以避免进程之间的相互干扰。</li><li>3.可以将对于大块内存的需求实际上可以将大块的虚拟内存映射为小块的物理内存。</li><li>4.共享内存：允许同一个物理页在不同的应用程序间共享。可以将不同进程的虚拟页映射到同一个物理页，就实现了共享内存。</li><li>5.写时拷贝：在fork之后，操作系统可以不立即为子进程分配内存，在对该内存页执行写操作后，会触发缺页异常，才真正分配内存。</li></ul><p><strong>换页机制</strong>：当物理内存中没有足够的空间分配新的内存时，需要将当前内存中的部分物理页的内容写入到磁盘中，然后就可以回收这些物理页并使用了。<br><strong>换页策略</strong> </p><ul><li>FIFO：先进先出。最先被换入的页面最先被换出。</li><li>Second Chance 二次机会算法：</li><li>LRU：最近最少使用：优先选择最久未被访问的页面换出。</li></ul><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面经" scheme="http://www.luckyzmj.cn/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="http://www.luckyzmj.cn/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="操作系统" scheme="http://www.luckyzmj.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解：32.最长有效括号</title>
    <link href="http://www.luckyzmj.cn/posts/67a7ce0b.html"/>
    <id>http://www.luckyzmj.cn/posts/67a7ce0b.html</id>
    <published>2021-09-23T03:43:15.224Z</published>
    <updated>2021-10-03T01:06:27.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="leetcode题解：-32-最长有效括号"><a href="#leetcode题解：-32-最长有效括号" class="headerlink" title="leetcode题解： 32.最长有效括号"></a>leetcode题解： 32.最长有效括号</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>我们定义dp[i]为以下标i为结尾的字符串的最长有效括号的长度。<br>则只有以’)’为结尾的子串才有可能是有效的。</p><ul><li>如果s[i]==’)’&amp;&amp;s[i-1]==’(‘，那么dp[i]=dp[i-2]+2</li><li>如果s[i]==’)’&amp;&amp;s[i-1]==’)’，那么此时在i之前已经有一个有效的子串，我们就需要判断该有效子串之前的字符是不是’(‘。<br>如果s[i-dp[i-1]-1]==’(‘,那么dp[i]=dp[i-1]+dp[i-dp[i-1]-2]+2。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">2</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>                 dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        m<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>通过栈来处理括号匹配问题是一种非常常见的思路。但是本题并不是判断一个字符串是不是有效的，而是判断字符串中最长有效括号的长度。<br>如果遍历每个子串进行判断的话，时间复杂度过高。<br>因此，我们需要一种新的思路。<br>我们假设这样一种情况，对于一个长度为n的字符串，它的[0,k)以及[k+1,n)是有效的。<br>那么，我们就需要能够在k之后，重新开始计算当前有效子串的长度。</p><p>对于一个有效的字符串，在遍历过后栈应该为空。我们可以利用这一点来设计算法。<br>先向栈中存储一个 -1，作为起始下标。<br>对于’(‘，我们将其下标推入栈中。<br>对于’)’，</p><ul><li>取出栈顶元素。</li><li>如果此时栈不为空，说明此时以下标i为结尾的字符串是有效的，那么计算此时有效子串的长度(i-s.top())。</li><li>如果此时栈为空，那么说明此时以该字符为结尾的子串是无效的，那么我们就需要更新计数的起始位置，将下标i推入栈中。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>       stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> d<span class="token punctuation">;</span>       <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span> d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token punctuation">{</span>              d<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>              <span class="token keyword">else</span> <span class="token punctuation">{</span>                   <span class="token keyword">int</span> temp<span class="token operator">=</span>i<span class="token operator">-</span>d<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   m<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解：23.合并k个升序链表题解</title>
    <link href="http://www.luckyzmj.cn/posts/df768b3c.html"/>
    <id>http://www.luckyzmj.cn/posts/df768b3c.html</id>
    <published>2021-09-23T02:22:57.241Z</published>
    <updated>2021-10-01T08:10:02.481Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LeetCode题解：23-合并k个升序链表"><a href="#LeetCode题解：23-合并k个升序链表" class="headerlink" title="LeetCode题解：23.合并k个升序链表"></a>LeetCode题解：23.合并k个升序链表</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个链表数组，每个链表都已经按升序排列。<br>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><p>示例 1：</p><pre class="line-numbers language-none"><code class="language-none">输入：lists = [[1,4,5],[1,3,4],[2,6]]输出：[1,1,2,3,4,4,5,6]解释：链表数组如下：[  1-&gt;4-&gt;5,  1-&gt;3-&gt;4,  2-&gt;6]将它们合并到一个有序链表中得到。1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例 2：</p><pre class="line-numbers language-none"><code class="language-none">输入：lists = []输出：[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例 3：</p><pre class="line-numbers language-none"><code class="language-none">输入：lists = [[]]输出：[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="顺序合并"><a href="#顺序合并" class="headerlink" title="顺序合并"></a>顺序合并</h4><p>对于链表合并，最直接的思路就是依次两两合并。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode<span class="token operator">*</span> p <span class="token operator">=</span> l1<span class="token punctuation">,</span> <span class="token operator">*</span> q <span class="token operator">=</span> l2<span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> temp <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> q<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    temp<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token operator">?</span>q<span class="token operator">:</span>p<span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> result <span class="token operator">=</span> t<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">delete</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode<span class="token operator">*</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> result<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度 ：O((k^2*n))<br>空间复杂度 ：O((1));</p><h4 id="分治合并"><a href="#分治合并" class="headerlink" title="分治合并"></a>分治合并</h4><p>将链表两两配对，即采取归并的思想，需要经历(logk)轮合并。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode<span class="token operator">*</span> p <span class="token operator">=</span> l1<span class="token punctuation">,</span> <span class="token operator">*</span> q <span class="token operator">=</span> l2<span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> temp <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> q<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    temp<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token operator">?</span>q<span class="token operator">:</span>p<span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> result <span class="token operator">=</span> t<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">delete</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode<span class="token operator">*</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> lists<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span> <span class="token operator">&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> temp<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span><span class="token function">merge</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>lists<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        next<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度 ：O((kn* logk))<br>空间复杂度： O((k))</p><h4 id="使用优先队列合并"><a href="#使用优先队列合并" class="headerlink" title="使用优先队列合并"></a>使用优先队列合并</h4><p>同时处理所有链表的合并，需要我们选出当前链表中剩余待合并元素的最小值，这需要我们利用优先队列来实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">s</span> <span class="token punctuation">{</span>    ListNode<span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token function">s</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">p</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> s<span class="token operator">&amp;</span> s2<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>val <span class="token operator">&gt;</span> s2<span class="token punctuation">.</span>p<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ListNode<span class="token operator">*</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> p <span class="token operator">=</span> result<span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>s<span class="token operator">&gt;</span> rank<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s <span class="token function">temp</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rank<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>rank<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> temp <span class="token operator">=</span> rank<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>p<span class="token punctuation">;</span>        rank<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> rank<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">s</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode<span class="token operator">*</span> r <span class="token operator">=</span> result<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">delete</span> result<span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解：10.正则表达式匹配</title>
    <link href="http://www.luckyzmj.cn/posts/b7f22337.html"/>
    <id>http://www.luckyzmj.cn/posts/b7f22337.html</id>
    <published>2021-09-23T01:12:26.401Z</published>
    <updated>2021-09-23T15:15:10.211Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>题目链接：<a href="https://leetcode-cn.com/problems/regular-expression-matching/">https://leetcode-cn.com/problems/regular-expression-matching/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://www.luckyzmj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode题解" scheme="http://www.luckyzmj.cn/tags/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
</feed>
